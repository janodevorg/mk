#!/bin/sh
set -euo pipefail

# Generate a Swift source file with the CLI version string.
# Prefers MARKETING_VERSION and CURRENT_PROJECT_VERSION from build settings (via xcconfig),
# and falls back to reading the shared macOS.xcconfig if unset.

# Output location: generate into the CLI sources so Swift compilation picks it up.
OUT_DIR="$SRCROOT/Sources/CLI/SemlyCLI"
mkdir -p "$OUT_DIR"

# Try environment first (provided by Xcode when xcconfig is attached to the target)
MARKETING_VERSION_VAL="${MARKETING_VERSION:-}"
CURRENT_PROJECT_VERSION_VAL="${CURRENT_PROJECT_VERSION:-}"

if [ -z "$MARKETING_VERSION_VAL" ] || [ -z "$CURRENT_PROJECT_VERSION_VAL" ]; then
  CONFIG_FILE="$SRCROOT/Sources/Semly/Configuration/macOS.xcconfig"
  if [ -f "$CONFIG_FILE" ]; then
    if [ -z "$MARKETING_VERSION_VAL" ]; then
      MARKETING_VERSION_VAL=$(grep -E '^MARKETING_VERSION\s*=\s*' "$CONFIG_FILE" | sed -E 's/.*=\s*([^ ]*).*/\1/')
    fi
    if [ -z "$CURRENT_PROJECT_VERSION_VAL" ]; then
      CURRENT_PROJECT_VERSION_VAL=$(grep -E '^CURRENT_PROJECT_VERSION\s*=\s*' "$CONFIG_FILE" | sed -E 's/.*=\s*([^ ]*).*/\1/')
    fi
  fi
fi

# Final fallback values to avoid empty strings breaking the build
MARKETING_VERSION_VAL=${MARKETING_VERSION_VAL:-0.0.0}
CURRENT_PROJECT_VERSION_VAL=${CURRENT_PROJECT_VERSION_VAL:-0}

VERSION_STRING="$MARKETING_VERSION_VAL ($CURRENT_PROJECT_VERSION_VAL)"

OUT_FILE="$OUT_DIR/CLIVersion.generated.swift"
cat > "$OUT_FILE" << EOF
// Generated by mk/scripts/generate-cli-version.sh â€” Do not edit.
// Uses MARKETING_VERSION and CURRENT_PROJECT_VERSION from build settings.

let SEMLY_CLI_VERSION: String = "${VERSION_STRING}"
EOF

echo "[Generate CLI Version] Wrote $OUT_FILE with version: $VERSION_STRING"
